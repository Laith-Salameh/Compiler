Grammar

    0 $accept: Class $end

    1 @1: /* empty */

    2 @2: /* empty */

    3 Class: CLASS @1 ID @2 '{' Small '}'

    4 Small: /* empty */
    5      | Small func
    6      | Small var_decl

    7 @3: /* empty */

    8 func: type_specifier ID @3 '(' decl_list ')' '{' comp '}'

    9 @4: /* empty */

   10 func: ID @4 '(' decl_list ')' '{' comp '}'

   11 type_specifier: INT
   12               | FLOAT
   13               | BOOL
   14               | CHAR
   15               | STRING

   16 decl_list: /* empty */
   17          | decl_list_e

   18 decl_list_e: decl_list_e ',' Param_decl
   19            | Param_decl

   20 Param_decl: type_specifier ID

   21 comp: comp var_decl
   22     | comp stmt
   23     | /* empty */

   24 var_decl: type_specifier var_decl_list ';'

   25 var_decl_list: var_decl_list ',' variable_id
   26              | variable_id

   27 variable_id: ID
   28            | ID '=' expr

   29 stmt: cond_stmt
   30     | while_stmt
   31     | BREAK ';'
   32     | assignStmt ';'
   33     | CONTINUE ';'
   34     | RT expr ';'
   35     | expr ';'

   36 cond_stmt: IF '(' expr ')' '{' comp '}'
   37          | IF '(' expr ')' '{' comp '}' ELSE '{' comp '}'

   38 while_stmt: WHILE '(' expr ')' '{' comp '}'

   39 assignStmt: ID '=' expr

   40 expr: primary
   41     | expr operator expr
   42     | '!' expr
   43     | '(' expr ')'
   44     | '-' expr
   45     | '+' expr
   46     | ID '(' exprList ')'

   47 exprList: /* empty */
   48         | exprList_e

   49 exprList_e: expr
   50           | exprList_e ',' expr

   51 operator: '+'
   52         | '-'
   53         | '*'
   54         | '/'
   55         | '%'
   56         | '>'
   57         | '<'
   58         | EQ
   59         | AND
   60         | OR
   61         | NEQ

   62 primary: INTNUM
   63        | FLOATNUM
   64        | CHARCONST
   65        | STRINGCONST
   66        | ID
   67        | TRUE
   68        | FALSE
   69        | NL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 42
'%' (37) 55
'(' (40) 8 10 36 37 38 43 46
')' (41) 8 10 36 37 38 43 46
'*' (42) 53
'+' (43) 45 51
',' (44) 18 25 50
'-' (45) 44 52
'/' (47) 54
';' (59) 24 31 32 33 34 35
'<' (60) 57
'=' (61) 28 39
'>' (62) 56
'{' (123) 3 8 10 36 37 38
'}' (125) 3 8 10 36 37 38
error (256)
WHILE (258) 38
IF (259) 36 37
ELSE (260) 37
INT (261) 11
FLOAT (262) 12
CHAR (263) 14
STRING (264) 15
BOOL (265) 13
BREAK (266) 31
CONTINUE (267) 33
RT (268) 34
NL (269) 69
TRUE (270) 67
FALSE (271) 68
EQ (272) 58
NEQ (273) 61
AND (274) 59
OR (275) 60
INTNUM (276) 62
FLOATNUM (277) 63
ID (278) 3 8 10 20 27 28 39 46 66
CHARCONST (279) 64
STRINGCONST (280) 65
CLASS (281) 3
IF_PREC (282)
OP (283)
eoe (284)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
Class (46)
    on left: 3, on right: 0
@1 (47)
    on left: 1, on right: 3
@2 (48)
    on left: 2, on right: 3
Small (49)
    on left: 4 5 6, on right: 3 5 6
func (50)
    on left: 8 10, on right: 5
@3 (51)
    on left: 7, on right: 8
@4 (52)
    on left: 9, on right: 10
type_specifier (53)
    on left: 11 12 13 14 15, on right: 8 20 24
decl_list (54)
    on left: 16 17, on right: 8 10
decl_list_e (55)
    on left: 18 19, on right: 17 18
Param_decl (56)
    on left: 20, on right: 18 19
comp (57)
    on left: 21 22 23, on right: 8 10 21 22 36 37 38
var_decl (58)
    on left: 24, on right: 6 21
var_decl_list (59)
    on left: 25 26, on right: 24 25
variable_id (60)
    on left: 27 28, on right: 25 26
stmt (61)
    on left: 29 30 31 32 33 34 35, on right: 22
cond_stmt (62)
    on left: 36 37, on right: 29
while_stmt (63)
    on left: 38, on right: 30
assignStmt (64)
    on left: 39, on right: 32
expr (65)
    on left: 40 41 42 43 44 45 46, on right: 28 34 35 36 37 38 39 41
    42 43 44 45 49 50
exprList (66)
    on left: 47 48, on right: 46
exprList_e (67)
    on left: 49 50, on right: 48 50
operator (68)
    on left: 51 52 53 54 55 56 57 58 59 60 61, on right: 41
primary (69)
    on left: 62 63 64 65 66 67 68 69, on right: 40


state 0

    0 $accept: . Class $end

    CLASS  shift, and go to state 1

    Class  go to state 2


state 1

    3 Class: CLASS . @1 ID @2 '{' Small '}'

    $default  reduce using rule 1 (@1)

    @1  go to state 3


state 2

    0 $accept: Class . $end

    $end  shift, and go to state 4


state 3

    3 Class: CLASS @1 . ID @2 '{' Small '}'

    ID  shift, and go to state 5


state 4

    0 $accept: Class $end .

    $default  accept


state 5

    3 Class: CLASS @1 ID . @2 '{' Small '}'

    $default  reduce using rule 2 (@2)

    @2  go to state 6


state 6

    3 Class: CLASS @1 ID @2 . '{' Small '}'

    '{'  shift, and go to state 7


state 7

    3 Class: CLASS @1 ID @2 '{' . Small '}'

    $default  reduce using rule 4 (Small)

    Small  go to state 8


state 8

    3 Class: CLASS @1 ID @2 '{' Small . '}'
    5 Small: Small . func
    6      | Small . var_decl

    INT     shift, and go to state 9
    FLOAT   shift, and go to state 10
    CHAR    shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13
    ID      shift, and go to state 14
    '}'     shift, and go to state 15

    func            go to state 16
    type_specifier  go to state 17
    var_decl        go to state 18


state 9

   11 type_specifier: INT .

    $default  reduce using rule 11 (type_specifier)


state 10

   12 type_specifier: FLOAT .

    $default  reduce using rule 12 (type_specifier)


state 11

   14 type_specifier: CHAR .

    $default  reduce using rule 14 (type_specifier)


state 12

   15 type_specifier: STRING .

    $default  reduce using rule 15 (type_specifier)


state 13

   13 type_specifier: BOOL .

    $default  reduce using rule 13 (type_specifier)


state 14

   10 func: ID . @4 '(' decl_list ')' '{' comp '}'

    $default  reduce using rule 9 (@4)

    @4  go to state 19


state 15

    3 Class: CLASS @1 ID @2 '{' Small '}' .

    $default  reduce using rule 3 (Class)


state 16

    5 Small: Small func .

    $default  reduce using rule 5 (Small)


state 17

    8 func: type_specifier . ID @3 '(' decl_list ')' '{' comp '}'
   24 var_decl: type_specifier . var_decl_list ';'

    ID  shift, and go to state 20

    var_decl_list  go to state 21
    variable_id    go to state 22


state 18

    6 Small: Small var_decl .

    $default  reduce using rule 6 (Small)


state 19

   10 func: ID @4 . '(' decl_list ')' '{' comp '}'

    '('  shift, and go to state 23


state 20

    8 func: type_specifier ID . @3 '(' decl_list ')' '{' comp '}'
   27 variable_id: ID .
   28            | ID . '=' expr

    '='  shift, and go to state 24

    '('       reduce using rule 7 (@3)
    $default  reduce using rule 27 (variable_id)

    @3  go to state 25


state 21

   24 var_decl: type_specifier var_decl_list . ';'
   25 var_decl_list: var_decl_list . ',' variable_id

    ','  shift, and go to state 26
    ';'  shift, and go to state 27


state 22

   26 var_decl_list: variable_id .

    $default  reduce using rule 26 (var_decl_list)


state 23

   10 func: ID @4 '(' . decl_list ')' '{' comp '}'

    INT     shift, and go to state 9
    FLOAT   shift, and go to state 10
    CHAR    shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    $default  reduce using rule 16 (decl_list)

    type_specifier  go to state 28
    decl_list       go to state 29
    decl_list_e     go to state 30
    Param_decl      go to state 31


state 24

   28 variable_id: ID '=' . expr

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 44
    primary  go to state 45


state 25

    8 func: type_specifier ID @3 . '(' decl_list ')' '{' comp '}'

    '('  shift, and go to state 46


state 26

   25 var_decl_list: var_decl_list ',' . variable_id

    ID  shift, and go to state 47

    variable_id  go to state 48


state 27

   24 var_decl: type_specifier var_decl_list ';' .

    $default  reduce using rule 24 (var_decl)


state 28

   20 Param_decl: type_specifier . ID

    ID  shift, and go to state 49


state 29

   10 func: ID @4 '(' decl_list . ')' '{' comp '}'

    ')'  shift, and go to state 50


state 30

   17 decl_list: decl_list_e .
   18 decl_list_e: decl_list_e . ',' Param_decl

    ','  shift, and go to state 51

    $default  reduce using rule 17 (decl_list)


state 31

   19 decl_list_e: Param_decl .

    $default  reduce using rule 19 (decl_list_e)


state 32

   69 primary: NL .

    $default  reduce using rule 69 (primary)


state 33

   67 primary: TRUE .

    $default  reduce using rule 67 (primary)


state 34

   68 primary: FALSE .

    $default  reduce using rule 68 (primary)


state 35

   62 primary: INTNUM .

    $default  reduce using rule 62 (primary)


state 36

   63 primary: FLOATNUM .

    $default  reduce using rule 63 (primary)


state 37

   46 expr: ID . '(' exprList ')'
   66 primary: ID .

    '('  shift, and go to state 52

    $default  reduce using rule 66 (primary)


state 38

   64 primary: CHARCONST .

    $default  reduce using rule 64 (primary)


state 39

   65 primary: STRINGCONST .

    $default  reduce using rule 65 (primary)


state 40

   44 expr: '-' . expr

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 53
    primary  go to state 45


state 41

   45 expr: '+' . expr

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 54
    primary  go to state 45


state 42

   43 expr: '(' . expr ')'

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 55
    primary  go to state 45


state 43

   42 expr: '!' . expr

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 56
    primary  go to state 45


state 44

   28 variable_id: ID '=' expr .
   41 expr: expr . operator expr

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67

    $default  reduce using rule 28 (variable_id)

    operator  go to state 68


state 45

   40 expr: primary .

    $default  reduce using rule 40 (expr)


state 46

    8 func: type_specifier ID @3 '(' . decl_list ')' '{' comp '}'

    INT     shift, and go to state 9
    FLOAT   shift, and go to state 10
    CHAR    shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    $default  reduce using rule 16 (decl_list)

    type_specifier  go to state 28
    decl_list       go to state 69
    decl_list_e     go to state 30
    Param_decl      go to state 31


state 47

   27 variable_id: ID .
   28            | ID . '=' expr

    '='  shift, and go to state 24

    $default  reduce using rule 27 (variable_id)


state 48

   25 var_decl_list: var_decl_list ',' variable_id .

    $default  reduce using rule 25 (var_decl_list)


state 49

   20 Param_decl: type_specifier ID .

    $default  reduce using rule 20 (Param_decl)


state 50

   10 func: ID @4 '(' decl_list ')' . '{' comp '}'

    '{'  shift, and go to state 70


state 51

   18 decl_list_e: decl_list_e ',' . Param_decl

    INT     shift, and go to state 9
    FLOAT   shift, and go to state 10
    CHAR    shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    type_specifier  go to state 28
    Param_decl      go to state 71


state 52

   46 expr: ID '(' . exprList ')'

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    $default  reduce using rule 47 (exprList)

    expr        go to state 72
    exprList    go to state 73
    exprList_e  go to state 74
    primary     go to state 45


state 53

   41 expr: expr . operator expr
   44     | '-' expr .

    $default  reduce using rule 44 (expr)

    operator  go to state 68


state 54

   41 expr: expr . operator expr
   45     | '+' expr .

    $default  reduce using rule 45 (expr)

    operator  go to state 68


state 55

   41 expr: expr . operator expr
   43     | '(' expr . ')'

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67
    ')'  shift, and go to state 75

    operator  go to state 68


state 56

   41 expr: expr . operator expr
   42     | '!' expr .

    $default  reduce using rule 42 (expr)

    operator  go to state 68


state 57

   58 operator: EQ .

    $default  reduce using rule 58 (operator)


state 58

   61 operator: NEQ .

    $default  reduce using rule 61 (operator)


state 59

   59 operator: AND .

    $default  reduce using rule 59 (operator)


state 60

   60 operator: OR .

    $default  reduce using rule 60 (operator)


state 61

   57 operator: '<' .

    $default  reduce using rule 57 (operator)


state 62

   56 operator: '>' .

    $default  reduce using rule 56 (operator)


state 63

   52 operator: '-' .

    $default  reduce using rule 52 (operator)


state 64

   51 operator: '+' .

    $default  reduce using rule 51 (operator)


state 65

   53 operator: '*' .

    $default  reduce using rule 53 (operator)


state 66

   54 operator: '/' .

    $default  reduce using rule 54 (operator)


state 67

   55 operator: '%' .

    $default  reduce using rule 55 (operator)


state 68

   41 expr: expr operator . expr

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 76
    primary  go to state 45


state 69

    8 func: type_specifier ID @3 '(' decl_list . ')' '{' comp '}'

    ')'  shift, and go to state 77


state 70

   10 func: ID @4 '(' decl_list ')' '{' . comp '}'

    $default  reduce using rule 23 (comp)

    comp  go to state 78


state 71

   18 decl_list_e: decl_list_e ',' Param_decl .

    $default  reduce using rule 18 (decl_list_e)


state 72

   41 expr: expr . operator expr
   49 exprList_e: expr .

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67

    $default  reduce using rule 49 (exprList_e)

    operator  go to state 68


state 73

   46 expr: ID '(' exprList . ')'

    ')'  shift, and go to state 79


state 74

   48 exprList: exprList_e .
   50 exprList_e: exprList_e . ',' expr

    ','  shift, and go to state 80

    $default  reduce using rule 48 (exprList)


state 75

   43 expr: '(' expr ')' .

    $default  reduce using rule 43 (expr)


state 76

   41 expr: expr . operator expr
   41     | expr operator expr .

    $default  reduce using rule 41 (expr)

    operator  go to state 68


state 77

    8 func: type_specifier ID @3 '(' decl_list ')' . '{' comp '}'

    '{'  shift, and go to state 81


state 78

   10 func: ID @4 '(' decl_list ')' '{' comp . '}'
   21 comp: comp . var_decl
   22     | comp . stmt

    WHILE        shift, and go to state 82
    IF           shift, and go to state 83
    INT          shift, and go to state 9
    FLOAT        shift, and go to state 10
    CHAR         shift, and go to state 11
    STRING       shift, and go to state 12
    BOOL         shift, and go to state 13
    BREAK        shift, and go to state 84
    CONTINUE     shift, and go to state 85
    RT           shift, and go to state 86
    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 87
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '}'          shift, and go to state 88
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    type_specifier  go to state 89
    var_decl        go to state 90
    stmt            go to state 91
    cond_stmt       go to state 92
    while_stmt      go to state 93
    assignStmt      go to state 94
    expr            go to state 95
    primary         go to state 45


state 79

   46 expr: ID '(' exprList ')' .

    $default  reduce using rule 46 (expr)


state 80

   50 exprList_e: exprList_e ',' . expr

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 96
    primary  go to state 45


state 81

    8 func: type_specifier ID @3 '(' decl_list ')' '{' . comp '}'

    $default  reduce using rule 23 (comp)

    comp  go to state 97


state 82

   38 while_stmt: WHILE . '(' expr ')' '{' comp '}'

    '('  shift, and go to state 98


state 83

   36 cond_stmt: IF . '(' expr ')' '{' comp '}'
   37          | IF . '(' expr ')' '{' comp '}' ELSE '{' comp '}'

    '('  shift, and go to state 99


state 84

   31 stmt: BREAK . ';'

    ';'  shift, and go to state 100


state 85

   33 stmt: CONTINUE . ';'

    ';'  shift, and go to state 101


state 86

   34 stmt: RT . expr ';'

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 102
    primary  go to state 45


state 87

   39 assignStmt: ID . '=' expr
   46 expr: ID . '(' exprList ')'
   66 primary: ID .

    '='  shift, and go to state 103
    '('  shift, and go to state 52

    $default  reduce using rule 66 (primary)


state 88

   10 func: ID @4 '(' decl_list ')' '{' comp '}' .

    $default  reduce using rule 10 (func)


state 89

   24 var_decl: type_specifier . var_decl_list ';'

    ID  shift, and go to state 47

    var_decl_list  go to state 21
    variable_id    go to state 22


state 90

   21 comp: comp var_decl .

    $default  reduce using rule 21 (comp)


state 91

   22 comp: comp stmt .

    $default  reduce using rule 22 (comp)


state 92

   29 stmt: cond_stmt .

    $default  reduce using rule 29 (stmt)


state 93

   30 stmt: while_stmt .

    $default  reduce using rule 30 (stmt)


state 94

   32 stmt: assignStmt . ';'

    ';'  shift, and go to state 104


state 95

   35 stmt: expr . ';'
   41 expr: expr . operator expr

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67
    ';'  shift, and go to state 105

    operator  go to state 68


state 96

   41 expr: expr . operator expr
   50 exprList_e: exprList_e ',' expr .

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67

    $default  reduce using rule 50 (exprList_e)

    operator  go to state 68


state 97

    8 func: type_specifier ID @3 '(' decl_list ')' '{' comp . '}'
   21 comp: comp . var_decl
   22     | comp . stmt

    WHILE        shift, and go to state 82
    IF           shift, and go to state 83
    INT          shift, and go to state 9
    FLOAT        shift, and go to state 10
    CHAR         shift, and go to state 11
    STRING       shift, and go to state 12
    BOOL         shift, and go to state 13
    BREAK        shift, and go to state 84
    CONTINUE     shift, and go to state 85
    RT           shift, and go to state 86
    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 87
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '}'          shift, and go to state 106
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    type_specifier  go to state 89
    var_decl        go to state 90
    stmt            go to state 91
    cond_stmt       go to state 92
    while_stmt      go to state 93
    assignStmt      go to state 94
    expr            go to state 95
    primary         go to state 45


state 98

   38 while_stmt: WHILE '(' . expr ')' '{' comp '}'

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 107
    primary  go to state 45


state 99

   36 cond_stmt: IF '(' . expr ')' '{' comp '}'
   37          | IF '(' . expr ')' '{' comp '}' ELSE '{' comp '}'

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 108
    primary  go to state 45


state 100

   31 stmt: BREAK ';' .

    $default  reduce using rule 31 (stmt)


state 101

   33 stmt: CONTINUE ';' .

    $default  reduce using rule 33 (stmt)


state 102

   34 stmt: RT expr . ';'
   41 expr: expr . operator expr

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67
    ';'  shift, and go to state 109

    operator  go to state 68


state 103

   39 assignStmt: ID '=' . expr

    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 37
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    expr     go to state 110
    primary  go to state 45


state 104

   32 stmt: assignStmt ';' .

    $default  reduce using rule 32 (stmt)


state 105

   35 stmt: expr ';' .

    $default  reduce using rule 35 (stmt)


state 106

    8 func: type_specifier ID @3 '(' decl_list ')' '{' comp '}' .

    $default  reduce using rule 8 (func)


state 107

   38 while_stmt: WHILE '(' expr . ')' '{' comp '}'
   41 expr: expr . operator expr

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67
    ')'  shift, and go to state 111

    operator  go to state 68


state 108

   36 cond_stmt: IF '(' expr . ')' '{' comp '}'
   37          | IF '(' expr . ')' '{' comp '}' ELSE '{' comp '}'
   41 expr: expr . operator expr

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67
    ')'  shift, and go to state 112

    operator  go to state 68


state 109

   34 stmt: RT expr ';' .

    $default  reduce using rule 34 (stmt)


state 110

   39 assignStmt: ID '=' expr .
   41 expr: expr . operator expr

    EQ   shift, and go to state 57
    NEQ  shift, and go to state 58
    AND  shift, and go to state 59
    OR   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '-'  shift, and go to state 63
    '+'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    '%'  shift, and go to state 67

    $default  reduce using rule 39 (assignStmt)

    operator  go to state 68


state 111

   38 while_stmt: WHILE '(' expr ')' . '{' comp '}'

    '{'  shift, and go to state 113


state 112

   36 cond_stmt: IF '(' expr ')' . '{' comp '}'
   37          | IF '(' expr ')' . '{' comp '}' ELSE '{' comp '}'

    '{'  shift, and go to state 114


state 113

   38 while_stmt: WHILE '(' expr ')' '{' . comp '}'

    $default  reduce using rule 23 (comp)

    comp  go to state 115


state 114

   36 cond_stmt: IF '(' expr ')' '{' . comp '}'
   37          | IF '(' expr ')' '{' . comp '}' ELSE '{' comp '}'

    $default  reduce using rule 23 (comp)

    comp  go to state 116


state 115

   21 comp: comp . var_decl
   22     | comp . stmt
   38 while_stmt: WHILE '(' expr ')' '{' comp . '}'

    WHILE        shift, and go to state 82
    IF           shift, and go to state 83
    INT          shift, and go to state 9
    FLOAT        shift, and go to state 10
    CHAR         shift, and go to state 11
    STRING       shift, and go to state 12
    BOOL         shift, and go to state 13
    BREAK        shift, and go to state 84
    CONTINUE     shift, and go to state 85
    RT           shift, and go to state 86
    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 87
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '}'          shift, and go to state 117
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    type_specifier  go to state 89
    var_decl        go to state 90
    stmt            go to state 91
    cond_stmt       go to state 92
    while_stmt      go to state 93
    assignStmt      go to state 94
    expr            go to state 95
    primary         go to state 45


state 116

   21 comp: comp . var_decl
   22     | comp . stmt
   36 cond_stmt: IF '(' expr ')' '{' comp . '}'
   37          | IF '(' expr ')' '{' comp . '}' ELSE '{' comp '}'

    WHILE        shift, and go to state 82
    IF           shift, and go to state 83
    INT          shift, and go to state 9
    FLOAT        shift, and go to state 10
    CHAR         shift, and go to state 11
    STRING       shift, and go to state 12
    BOOL         shift, and go to state 13
    BREAK        shift, and go to state 84
    CONTINUE     shift, and go to state 85
    RT           shift, and go to state 86
    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 87
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '}'          shift, and go to state 118
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    type_specifier  go to state 89
    var_decl        go to state 90
    stmt            go to state 91
    cond_stmt       go to state 92
    while_stmt      go to state 93
    assignStmt      go to state 94
    expr            go to state 95
    primary         go to state 45


state 117

   38 while_stmt: WHILE '(' expr ')' '{' comp '}' .

    $default  reduce using rule 38 (while_stmt)


state 118

   36 cond_stmt: IF '(' expr ')' '{' comp '}' .
   37          | IF '(' expr ')' '{' comp '}' . ELSE '{' comp '}'

    ELSE  shift, and go to state 119

    $default  reduce using rule 36 (cond_stmt)


state 119

   37 cond_stmt: IF '(' expr ')' '{' comp '}' ELSE . '{' comp '}'

    '{'  shift, and go to state 120


state 120

   37 cond_stmt: IF '(' expr ')' '{' comp '}' ELSE '{' . comp '}'

    $default  reduce using rule 23 (comp)

    comp  go to state 121


state 121

   21 comp: comp . var_decl
   22     | comp . stmt
   37 cond_stmt: IF '(' expr ')' '{' comp '}' ELSE '{' comp . '}'

    WHILE        shift, and go to state 82
    IF           shift, and go to state 83
    INT          shift, and go to state 9
    FLOAT        shift, and go to state 10
    CHAR         shift, and go to state 11
    STRING       shift, and go to state 12
    BOOL         shift, and go to state 13
    BREAK        shift, and go to state 84
    CONTINUE     shift, and go to state 85
    RT           shift, and go to state 86
    NL           shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INTNUM       shift, and go to state 35
    FLOATNUM     shift, and go to state 36
    ID           shift, and go to state 87
    CHARCONST    shift, and go to state 38
    STRINGCONST  shift, and go to state 39
    '-'          shift, and go to state 40
    '+'          shift, and go to state 41
    '}'          shift, and go to state 122
    '('          shift, and go to state 42
    '!'          shift, and go to state 43

    type_specifier  go to state 89
    var_decl        go to state 90
    stmt            go to state 91
    cond_stmt       go to state 92
    while_stmt      go to state 93
    assignStmt      go to state 94
    expr            go to state 95
    primary         go to state 45


state 122

   37 cond_stmt: IF '(' expr ')' '{' comp '}' ELSE '{' comp '}' .

    $default  reduce using rule 37 (cond_stmt)
